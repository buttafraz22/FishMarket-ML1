# -*- coding: utf-8 -*-
"""Fish Market.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bTg08F1EpxkF1RNwa7rcVH66VYW116YY

# Fish Market Analysis
This notebook analyzes the data of a fish market. Multiple variables are in the dataset, and we have to look for relationships between the data and build a model that fits it the best by predicting weight of fish species.

*Expected*: An Accuracy of over 0.75 to be considered acceptable.

# Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""# Data Preprocessing"""

df = pd.read_csv('FishMarket_MultipleLinearRegression.csv')
df.head()

df.tail()

df.isna()     #check for null values

"""**Visualizing the data**"""

plt.scatter(df.Length1.values.tolist(), df.Weight.values.tolist(),color='black')
plt.xlabel('Length1')
plt.ylabel('Weight')
plt.title('Relationship Between Length1 and Weight')
plt.plot()
plt.show()

plt.scatter(df.Length2.values.tolist(), df.Weight.values.tolist(),color='black')
plt.xlabel('Length2')
plt.ylabel('Weight')
plt.title('Relationship Between Length2 and Weight')
plt.plot()
plt.show()

plt.scatter(df.Length3.values.tolist(), df.Weight.values.tolist(),color='black')
plt.xlabel('Length3')
plt.ylabel('Weight')
plt.title('Relationship Between Length3 and Weight')
plt.plot()
plt.show()

plt.scatter(df.Height.values.tolist(), df.Weight.values.tolist(),color='black')
plt.xlabel('Height')
plt.ylabel('Weight')
plt.title('Relationship Between Height and Weight')
plt.plot()
plt.show()

plt.scatter(df.Width.values.tolist(), df.Weight.values.tolist(),color='black')
plt.xlabel('Width')
plt.ylabel('Weight')
plt.title('Relationship Between Width and Weight')
plt.plot()
plt.show()

"""Quick Sanity check for the dataframe"""

df.head()

"""**Re-ordering the features and dependent variables**"""

orders_cols = ["Species", "Length1", "Length2","Length3", "Height", "Width","Weight"]
df=df.reindex(columns=orders_cols)
df.head()

"""Perfect. Now, on towards building the model. Species column is the categorical data.

# The Model
The model we will use is a multiple linear regression model to predict the weight. At the end, we will compare the weights of our test sets and the ones out model predicted for the test set.
"""

# Split into matrix of features and dependant variables
X = df.iloc[: , :-1].values
y = df.iloc[: , -1].values

"""# Encoding the Categorical Data"""

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), ([0]))], remainder='passthrough')
X = np.array(ct.fit_transform(X))

print(X)

"""# Splitting into train and test sets"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=0)

"""# Training the model"""

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

"""# Checking predictions for test sets"""

y_pred = regressor.predict(X_test)
np.set_printoptions(precision=0)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""The Model is overfit. Something needs to be done. Hmmm.

# Feature Elimination
"""

df.drop('Species',inplace=True,axis=1)
df.info()

# Running the Model again
X = df.iloc[: , :-1].values
# y is the same dependant variable

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=0)
reg_model = LinearRegression()
reg_model.fit(X_train, y_train)

score = reg_model.score(X_test, y_test)
print(f"Regression Model Score: {score}")

y_pred = reg_model.predict(X_test)
comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print("\nPredicted vs Actual:")
print(comparison_df.head())

"""# Accuracy of the model
The accuracy of the model comes out to be 0.81 .
"""